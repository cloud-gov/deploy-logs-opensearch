---
groups:
  - name: all
    jobs:
      - set-self
      - audit-to-s3-development
      - audit-to-s3-staging
      - audit-to-s3-production
      - build-opensearch-release
      - deploy-opensearch-development
      - upload-dashboards-objects-development
      - smoke-tests-development
      - e2e-tests-development
      - tenant-development
      - deploy-opensearch-staging
      - upload-dashboards-objects-staging
      - smoke-tests-staging
      - e2e-tests-staging
      - tenant-staging
      - plan-opensearch-production
      - deploy-opensearch-production
      - upload-dashboards-objects-production
      - smoke-tests-production
      - e2e-tests-production
      - tenant-production
      - run-tests
  - name: tasks
    jobs:
      - audit-to-s3-development
      - audit-to-s3-staging
      - audit-to-s3-production
      - build-opensearch-release
  - name: update-test-users
    jobs:
      - update-test-users-dev
      - update-test-users-staging
      - update-test-users-production
  - name: development
    jobs:
      - deploy-opensearch-development
      - upload-dashboards-objects-development
      - smoke-tests-development
      - e2e-tests-development
      - tenant-development
  - name: staging
    jobs:
      - deploy-opensearch-staging
      - upload-dashboards-objects-staging
      - smoke-tests-staging
      - e2e-tests-staging
      - tenant-staging
  - name: production
    jobs:
      - plan-opensearch-production
      - deploy-opensearch-production
      - upload-dashboards-objects-production
      - smoke-tests-production
      - e2e-tests-production
      - tenant-production

jobs:
  - name: set-self
    plan:
      - get: deploy-logs-opensearch-config
        trigger: true
      - set_pipeline: self
        file: deploy-logs-opensearch-config/ci/pipeline.yml

  - name: build-opensearch-release
    plan:
      - in_parallel:
          - get: release-git-repo
            resource: opensearch-release-git-repo
            trigger: true
          - get: pipeline-tasks
          - get: final-builds-dir-tarball
            resource: opensearch-final-builds-dir-tarball
          - get: releases-dir-tarball
            resource: opensearch-releases-dir-tarball
          - get: general-task
      - task: run-tests
        image: general-task
        config:
          platform: linux
          inputs:
            - name: release-git-repo
          run:
            path: sh
            args:
              - -exc
              - |
                cd release-git-repo
                bundle install
                # run release template unit tests
                bundle exec rspec
      - task: finalize-release
        file: pipeline-tasks/finalize-bosh-release.yml
        tags: [iaas]
        params:
          AWS_DEFAULT_REGION: ((aws_default_region))
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
          PRIVATE_YML_CONTENT: |-
            ---
            blobstore:
              options:
                region: ((s3-bosh-blobstore-info.region))
                bucket_name: ((s3-bosh-blobstore-info.bucket_name))
                credentials_source: ((s3-bosh-blobstore-info.credentials_source))
                server_side_encryption: ((s3-bosh-blobstore-info.server_side_encryption))
      - in_parallel:
          - put: opensearch-release
            tags: [iaas]
            params:
              file: finalized-release/opensearch-*.tgz
          - put: opensearch-final-builds-dir-tarball
            tags: [iaas]
            params:
              file: finalized-release/final-builds-dir-opensearch.tgz
          - put: opensearch-releases-dir-tarball
            tags: [iaas]
            params:
              file: finalized-release/releases-dir-opensearch.tgz
    on_failure:
      put: slack
      params: &slack-failure-params
        text: |
          :x: FAILED to build OpenSearch BOSH release
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: ((slack-channel-customer-success))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

  - name: run-tests
    plan:
    - get: general-task
    - get: deploy-logs-opensearch-config
      trigger: true
      passed: [set-self]
    - task: run-unit-tests
      image: general-task
      file: deploy-logs-opensearch-config/ci/run-unit-tests.yml

  - name: audit-to-s3-development
    serial: true
    plan:
    - get: general-task
    - get: fifteen-minute-timer
      trigger: true
    - get: deploy-logs-opensearch-config
      passed: [run-tests]
    - get: pipeline-tasks
    - get: opensearch-development-deployment
    - task: transfer-audit-logs-to-s3
      image: general-task
      file: deploy-logs-opensearch-config/ci/upload-audit-events-s3.yml
      params:
        BUCKET: ((opensearch-audit-bucket-development))
        UAA_API_URL: ((uaa-url-development))
        UAA_CLIENT_ID: ((uaa-read-only-client-username))
        UAA_CLIENT_SECRET: ((uaa-read-only-client-secret-development))
        CF_API_URL: ((dev-cf-api-url))
        CF_USERNAME: ((cf-username-development))
        CF_PASSWORD: ((cf-password-development))
        AWS_DEFAULT_REGION: ((aws-region))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))

  - name: audit-to-s3-staging
    serial: true
    plan:
    - get: general-task
    - get: fifteen-minute-timer
      trigger: true
    - get: deploy-logs-opensearch-config
      passed: [run-tests]
    - get: pipeline-tasks
    - get: opensearch-staging-deployment
    - task: transfer-audit-logs-to-s3
      image: general-task
      file: deploy-logs-opensearch-config/ci/upload-audit-events-s3.yml
      params:
        BUCKET: ((opensearch-audit-bucket-staging))
        CF_API_URL: ((staging-cf-api-url))
        CF_USERNAME: ((cf-username-staging))
        CF_PASSWORD: ((cf-password-staging))
        UAA_API_URL: ((uaa-url-staging))
        UAA_CLIENT_ID: ((uaa-read-only-client-username))
        UAA_CLIENT_SECRET: ((uaa-read-only-client-secret-staging))
        AWS_DEFAULT_REGION: ((aws-region))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))

  - name: audit-to-s3-production
    serial: true
    plan:
    - get: general-task
    - get: fifteen-minute-timer
      trigger: true
    - get: deploy-logs-opensearch-config
      passed: [run-tests]
    - get: pipeline-tasks
    - get: opensearch-production-deployment
    - task: transfer-audit-logs-to-s3
      image: general-task
      file: deploy-logs-opensearch-config/ci/upload-audit-events-s3.yml
      params:
        BUCKET: ((opensearch-audit-bucket-production))
        CF_API_URL: ((cf-api-url-production))
        CF_USERNAME: ((cf-username-production))
        CF_PASSWORD: ((cf-password-production))
        AWS_DEFAULT_REGION: ((aws-region))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))

  - name: update-test-users-dev
    serial: true
    plan:
      - get: deploy-logs-opensearch-config
        params: { depth: 1 }
      - get: general-task
      - get: weekly
        trigger: true
      - task: update-test-user-credentials
        image: general-task
        config:
          inputs:
            - name: deploy-logs-opensearch-config
          platform: linux
          run:
            path: deploy-logs-opensearch-config/ci/update-test-user-passwords.sh
          params:
            BOSH_DIRECTOR_NAME: development
            UAA_API_URL: ((uaa-url-development))
            UAA_CLIENT_ID: ((uaa-client-id-development))
            UAA_CLIENT_SECRET: ((uaa-client-secret-development))
            TEST_USERS_CREDENTIAL_USERNAME_MAP: ((dev-test-users-credential-username-map))
            CREDHUB_CA_CERT: ((master-bosh-ca.certificate))
            CREDHUB_CLIENT: ((opensearch-ci-credhub-client-id))
            CREDHUB_SECRET: ((opensearch-ci-credhub-client-secret))
            CREDHUB_SERVER: ((credhub-api-server))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: Failed to update test users
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: update-test-users-staging
    serial: true
    plan:
      - get: deploy-logs-opensearch-config
        params: { depth: 1 }
      - get: general-task
      - get: weekly
        trigger: true
      - task: update-test-user-credentials
        image: general-task
        config:
          inputs:
            - name: deploy-logs-opensearch-config
          platform: linux
          run:
            path: deploy-logs-opensearch-config/ci/update-test-user-passwords.sh
          params:
            BOSH_DIRECTOR_NAME: staging
            UAA_API_URL: ((uaa-url-staging))
            UAA_CLIENT_ID: ((uaa-client-id-staging))
            UAA_CLIENT_SECRET: ((uaa-client-secret-staging))
            TEST_USERS_CREDENTIAL_USERNAME_MAP: ((staging-test-users-credential-username-map))
            CREDHUB_CA_CERT: ((master-bosh-ca.certificate))
            CREDHUB_CLIENT: ((opensearch-ci-credhub-client-id))
            CREDHUB_SECRET: ((opensearch-ci-credhub-client-secret))
            CREDHUB_SERVER: ((credhub-api-server))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: Failed to update test users
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: update-test-users-production
    serial: true
    plan:
      - get: deploy-logs-opensearch-config
        params: { depth: 1 }
      - get: general-task
      - get: weekly
        trigger: true
      - task: update-test-user-credentials
        image: general-task
        config:
          inputs:
            - name: deploy-logs-opensearch-config
          platform: linux
          run:
            path: deploy-logs-opensearch-config/ci/update-test-user-passwords.sh
          params:
            BOSH_DIRECTOR_NAME: production
            UAA_API_URL: ((uaa-url-production))
            UAA_CLIENT_ID: ((uaa-client-id-production))
            UAA_CLIENT_SECRET: ((uaa-client-secret-production))
            TEST_USERS_CREDENTIAL_USERNAME_MAP: ((production-test-users-credential-username-map))
            CREDHUB_CA_CERT: ((master-bosh-ca.certificate))
            CREDHUB_CLIENT: ((opensearch-ci-credhub-client-id))
            CREDHUB_SECRET: ((opensearch-ci-credhub-client-secret))
            CREDHUB_SERVER: ((credhub-api-server))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: Failed to update test users
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: deploy-opensearch-development
    serial_groups: [bosh-development]
    plan:
      - in_parallel:
          - get: pipeline-tasks
          - get: deploy-logs-opensearch-config
            trigger: true
            passed: [run-tests]
          - get: opensearch-release
            trigger: true
          - get: opensearch-stemcell-jammy
            trigger: true
          - get: terraform-yaml
            resource: terraform-yaml-development
            trigger: true
          - get: general-task
      - task: prepare-deployment
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_development_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_development_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: prepare_deploy
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
      - task: opensearch-manifest
        image: general-task
        config:
          platform: linux
          inputs:
            - name: deploy-logs-opensearch-config
            - name: terraform-yaml
          run:
            path: sh
            args:
              - -exc
              - |
                SPRUCE_FILE_BASE_PATH=deploy-logs-opensearch-config spruce merge \
                  --prune terraform_outputs \
                  deploy-logs-opensearch-config/opensearch-deployment.yml \
                  deploy-logs-opensearch-config/opensearch-jobs.yml \
                  deploy-logs-opensearch-config/opensearch-development.yml \
                  terraform-yaml/state.yml \
                  > opensearch-manifest/manifest.yml
          outputs:
            - name: opensearch-manifest
      - task: terraform-secrets
        image: general-task
        file: deploy-logs-opensearch-config/ci/terraform-secrets.yml
      - put: opensearch-development-deployment
        params:
          manifest: opensearch-manifest/manifest.yml
          releases:
            - opensearch-release/*.tgz
          stemcells:
            - opensearch-stemcell-jammy/*.tgz
          ops_files:
            - deploy-logs-opensearch-config/opsfiles/enable-node-tls.yml
            - deploy-logs-opensearch-config/opsfiles/enable-dashboard-dns.yml
            - deploy-logs-opensearch-config/opsfiles/enable-dashboards-tls.yml
            - deploy-logs-opensearch-config/opsfiles/enable-proxy-auth.yml
            - deploy-logs-opensearch-config/opsfiles/enable-auth-proxy-route-dev.yml
            - deploy-logs-opensearch-config/opsfiles/enable-syslog.yml
            - deploy-logs-opensearch-config/opsfiles/cf-development.yml
          vars_files:
            - terraform-secrets/terraform.yml
      - task: finish-deployment
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_development_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_development_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: finish_deploy
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: FAILED to deploy logs-OpenSearch in development
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: smoke-tests-development
    serial_groups: [bosh-development]
    plan:
      - in_parallel:
          - get: tests-timer
            trigger: true
          - get: pipeline-tasks
          - get: opensearch-release
            trigger: true
            passed: [deploy-opensearch-development]
          - get: opensearch-stemcell-jammy
            trigger: true
            passed: [deploy-opensearch-development]
          - get: deploy-logs-opensearch-config
            passed: [deploy-opensearch-development]
            trigger: true
          - get: opensearch-development-deployment
            trigger: true
            passed: [deploy-opensearch-development]
      - task: smoke-tests
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_development_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_development_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: smoke_tests
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: Smoke tests for OpenSearch in development FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: e2e-tests-development
    serial_groups: [bosh-development]
    plan:
      - in_parallel:
          - get: pipeline-tasks
          - get: opensearch-release
            trigger: true
            passed: [deploy-opensearch-development]
          - get: opensearch-stemcell-jammy
            trigger: true
            passed: [deploy-opensearch-development]
          - get: deploy-logs-opensearch-config
            passed: [deploy-opensearch-development]
            trigger: true
          - get: opensearch-development-deployment
            trigger: true
            passed: [deploy-opensearch-development]
          - get: tests-timer
            trigger: true
          - get: playwright-python
          - get: general-task
      - task: provision-test-user-cf-access
        image: general-task
        config:
          platform: linux
          inputs:
            - name: deploy-logs-opensearch-config
          run:
            path: deploy-logs-opensearch-config/ci/provision-test-user-cf-access.sh
        params:
          CF_API_URL: ((dev-cf-api-url))
          CF_USERNAME: ((development-cf-username))
          CF_PASSWORD: ((development-cf-password))
          TEST_USER_1_USERNAME: ((development-test-user-1-username))
          TEST_USER_2_USERNAME: ((development-test-user-2-username))
          TEST_USER_3_USERNAME: ((development-test-user-3-username))
          TEST_USER_4_USERNAME: ((development-test-user-4-username))
          CF_ORG_1_NAME: ((test-org-1))
          CF_ORG_2_NAME: ((test-org-2))
          CF_ORG_3_NAME: ((test-org-3))
      - task: e2e-tests
        image: playwright-python
        file: deploy-logs-opensearch-config/ci/e2e-tests.yml
        params:
          CF_SYSTEM_DOMAIN: ((cf-system-domain-development))
          CF_ORG_1_NAME: ((test-org-1))
          CF_ORG_2_NAME: ((test-org-2))
          CF_ORG_3_NAME: ((test-org-3))

          TEST_USER_1_USERNAME: ((development-test-user-1-username))
          TEST_USER_1_PASSWORD: ((development-test-user-1-password))
          TEST_USER_1_TOTP_SEED: ((development-test-user-1-totp-seed))

          TEST_USER_2_USERNAME: ((development-test-user-2-username))
          TEST_USER_2_PASSWORD: ((development-test-user-2-password))
          TEST_USER_2_TOTP_SEED: ((development-test-user-2-totp-seed))

          TEST_USER_3_USERNAME: ((development-test-user-3-username))
          TEST_USER_3_PASSWORD: ((development-test-user-3-password))
          TEST_USER_3_TOTP_SEED: ((development-test-user-3-totp-seed))

          TEST_USER_4_USERNAME: ((development-test-user-4-username))
          TEST_USER_4_PASSWORD: ((development-test-user-4-password))
          TEST_USER_4_TOTP_SEED: ((development-test-user-4-totp-seed))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: E2E tests for OpenSearch in development FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: tenant-development
    serial_groups: [bosh-development]
    plan:
      - in_parallel:
          - get: general-task
          - get: pipeline-tasks
          - get: deploy-logs-opensearch-config
            passed: [deploy-opensearch-development]
            trigger: true
          - get: opensearch-development-deployment
            trigger: true
            passed: [deploy-opensearch-development]
      - task: create-tenants
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_development_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_development_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: upload_tenant
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: Create tenants for OpenSearch in development FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: upload-dashboards-objects-development
    serial_groups: [bosh-development]
    plan:
      - in_parallel:
          - get: pipeline-tasks
          - get: opensearch-release
          - get: opensearch-stemcell-jammy
          - get: deploy-logs-opensearch-config
            passed: [tenant-development]
            trigger: true
          - get: opensearch-development-deployment
            passed: [tenant-development]
            trigger: true
      - task: upload-dashboards-objects
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_development_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_development_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: upload-dashboards-objects
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: FAILED to run upload-dashboards-objects for logs-opensearch in development
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: deploy-opensearch-staging
    serial_groups: [bosh-staging]
    plan:
      - in_parallel:
          - get: pipeline-tasks
          - get: deploy-logs-opensearch-config
            trigger: true
            passed: [smoke-tests-development]
          - get: opensearch-release
            trigger: true
            passed: [smoke-tests-development]
          - get: opensearch-stemcell-jammy
            trigger: true
            passed: [smoke-tests-development]
          - get: terraform-yaml
            resource: terraform-yaml-staging
            trigger: true
          - get: general-task
      - task: prepare-deployment
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_staging_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_staging_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: prepare_deploy
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
      - task: opensearch-manifest
        image: general-task
        config:
          platform: linux
          inputs:
            - name: deploy-logs-opensearch-config
            - name: terraform-yaml
          run:
            path: sh
            args:
              - -exc
              - |
                SPRUCE_FILE_BASE_PATH=deploy-logs-opensearch-config spruce merge \
                  --prune terraform_outputs \
                  deploy-logs-opensearch-config/opensearch-deployment.yml \
                  deploy-logs-opensearch-config/opensearch-jobs.yml \
                  deploy-logs-opensearch-config/opensearch-staging.yml \
                  terraform-yaml/state.yml \
                  > opensearch-manifest/manifest.yml
          outputs:
            - name: opensearch-manifest
      - task: terraform-secrets
        image: general-task
        file: deploy-logs-opensearch-config/ci/terraform-secrets.yml
      - put: opensearch-staging-deployment
        params:
          manifest: opensearch-manifest/manifest.yml
          releases:
            - opensearch-release/*.tgz
          stemcells:
            - opensearch-stemcell-jammy/*.tgz
          ops_files:
            - deploy-logs-opensearch-config/opsfiles/enable-node-tls.yml
            - deploy-logs-opensearch-config/opsfiles/enable-dashboard-dns.yml
            - deploy-logs-opensearch-config/opsfiles/enable-dashboards-tls.yml
            - deploy-logs-opensearch-config/opsfiles/enable-proxy-auth.yml
            - deploy-logs-opensearch-config/opsfiles/enable-auth-proxy-route-staging.yml
            - deploy-logs-opensearch-config/opsfiles/enable-syslog.yml
            - deploy-logs-opensearch-config/opsfiles/cf-staging.yml
          vars_files:
            - terraform-secrets/terraform.yml
      - task: finish-deployment
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_staging_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_staging_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: finish_deploy
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: FAILED to deploy logs-OpenSearch in staging
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: smoke-tests-staging
    serial_groups: [bosh-staging]
    plan:
      - in_parallel:
          - get: tests-timer
            trigger: true
          - get: pipeline-tasks
          - get: opensearch-release
            trigger: true
            passed: [deploy-opensearch-staging]
          - get: opensearch-stemcell-jammy
            trigger: true
            passed: [deploy-opensearch-staging]
          - get: deploy-logs-opensearch-config
            passed: [deploy-opensearch-staging]
            trigger: true
          - get: opensearch-staging-deployment
            passed: [deploy-opensearch-staging]
            trigger: true
      - task: smoke-tests
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_staging_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_staging_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: smoke_tests
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: Smoke tests for OpenSearch in staging FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: e2e-tests-staging
    serial_groups: [bosh-staging]
    plan:
      - in_parallel:
          - get: pipeline-tasks
          - get: opensearch-release
            trigger: true
            passed: [deploy-opensearch-staging]
          - get: opensearch-stemcell-jammy
            trigger: true
            passed: [deploy-opensearch-staging]
          - get: deploy-logs-opensearch-config
            passed: [deploy-opensearch-staging]
            trigger: true
          - get: opensearch-staging-deployment
            trigger: true
            passed: [deploy-opensearch-staging]
          - get: tests-timer
            trigger: true
          - get: playwright-python
          - get: general-task
      - task: provision-test-user-cf-access
        image: general-task
        config:
          platform: linux
          inputs:
            - name: deploy-logs-opensearch-config
          run:
            path: deploy-logs-opensearch-config/ci/provision-test-user-cf-access.sh
        params:
          CF_API_URL: ((staging-cf-api-url))
          CF_USERNAME: ((staging-cf-username))
          CF_PASSWORD: ((staging-cf-password))
          TEST_USER_1_USERNAME: ((staging-test-user-1-username))
          TEST_USER_2_USERNAME: ((staging-test-user-2-username))
          TEST_USER_3_USERNAME: ((staging-test-user-3-username))
          TEST_USER_4_USERNAME: ((staging-test-user-4-username))
          CF_ORG_1_NAME: ((test-org-1))
          CF_ORG_2_NAME: ((test-org-2))
          CF_ORG_3_NAME: ((test-org-3))
      - task: e2e-tests
        image: playwright-python
        file: deploy-logs-opensearch-config/ci/e2e-tests.yml
        params:
          CF_SYSTEM_DOMAIN: ((cf-system-domain-staging))

          CF_ORG_1_NAME: ((test-org-1))
          CF_ORG_2_NAME: ((test-org-2))
          CF_ORG_3_NAME: ((test-org-3))

          TEST_USER_1_USERNAME: ((staging-test-user-1-username))
          TEST_USER_1_PASSWORD: ((staging-test-user-1-password))
          TEST_USER_1_TOTP_SEED: ((staging-test-user-1-totp-seed))

          TEST_USER_2_USERNAME: ((staging-test-user-2-username))
          TEST_USER_2_PASSWORD: ((staging-test-user-2-password))
          TEST_USER_2_TOTP_SEED: ((staging-test-user-2-totp-seed))

          TEST_USER_3_USERNAME: ((staging-test-user-3-username))
          TEST_USER_3_PASSWORD: ((staging-test-user-3-password))
          TEST_USER_3_TOTP_SEED: ((staging-test-user-3-totp-seed))

          TEST_USER_4_USERNAME: ((staging-test-user-4-username))
          TEST_USER_4_PASSWORD: ((staging-test-user-4-password))
          TEST_USER_4_TOTP_SEED: ((staging-test-user-4-totp-seed))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: E2E tests for OpenSearch in staging FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: tenant-staging
    serial_groups: [bosh-staging]
    plan:
      - in_parallel:
          - get: general-task
          - get: pipeline-tasks
          - get: deploy-logs-opensearch-config
            passed: [deploy-opensearch-staging]
            trigger: true
          - get: opensearch-staging-deployment
            trigger: true
            passed: [deploy-opensearch-staging]
      - task: create-tenants
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_staging_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_staging_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: upload_tenant
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: Create tenants for OpenSearch in staging FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: upload-dashboards-objects-staging
    serial_groups: [bosh-staging]
    plan:
      - in_parallel:
          - get: pipeline-tasks
          - get: opensearch-release
          - get: opensearch-stemcell-jammy
          - get: deploy-logs-opensearch-config
            passed: [tenant-staging]
            trigger: true
          - get: opensearch-staging-deployment
            passed: [tenant-staging]
            trigger: true
      - task: upload-dashboards-objects
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_staging_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_staging_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: upload-dashboards-objects
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: FAILED to run upload-dashboards-objects for logs-opensearch in staging
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: plan-opensearch-production
    serial_groups: [bosh-production]
    plan:
      - in_parallel:
          - get: pipeline-tasks
          - get: deploy-logs-opensearch-config
            trigger: true
            passed: [smoke-tests-staging]
          - get: opensearch-release
            trigger: true
            passed: [smoke-tests-staging]
          - get: opensearch-stemcell-jammy
            trigger: true
            passed: [smoke-tests-staging]
          - get: terraform-yaml
            resource: terraform-yaml-production
            trigger: true
          - get: general-task
      - task: opensearch-manifest
        image: general-task
        config: &build-prod-manifest-config
          platform: linux
          inputs:
            - name: deploy-logs-opensearch-config
            - name: terraform-yaml
          run:
            path: sh
            args:
              - -exc
              - |
                SPRUCE_FILE_BASE_PATH=deploy-logs-opensearch-config spruce merge \
                  --prune terraform_outputs \
                  deploy-logs-opensearch-config/opensearch-deployment.yml \
                  deploy-logs-opensearch-config/opensearch-jobs.yml \
                  deploy-logs-opensearch-config/opensearch-production.yml \
                  terraform-yaml/state.yml \
                  > opensearch-manifest/manifest.yml
          outputs:
            - name: opensearch-manifest
      - task: terraform-secrets
        image: general-task
        file: deploy-logs-opensearch-config/ci/terraform-secrets.yml
      - put: opensearch-production-deployment
        params: &prod-deploy-params
          dry_run: true
          manifest: opensearch-manifest/manifest.yml
          releases:
            - opensearch-release/*.tgz
          stemcells:
            - opensearch-stemcell-jammy/*.tgz
          ops_files:
            - deploy-logs-opensearch-config/opsfiles/enable-node-tls.yml
            - deploy-logs-opensearch-config/opsfiles/enable-dashboard-dns.yml
            - deploy-logs-opensearch-config/opsfiles/enable-dashboards-tls.yml
            - deploy-logs-opensearch-config/opsfiles/enable-proxy-auth.yml
            - deploy-logs-opensearch-config/opsfiles/enable-auth-proxy-route-production.yml
            - deploy-logs-opensearch-config/opsfiles/enable-syslog.yml
            - deploy-logs-opensearch-config/opsfiles/cf-production.yml
          vars_files:
            - terraform-secrets/terraform.yml
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: FAILED to plan deployment of logs-OpenSearch in production
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: deploy-opensearch-production
    serial_groups: [bosh-production]
    plan:
      - in_parallel:
          - get: pipeline-tasks
          - get: deploy-logs-opensearch-config
            passed: [plan-opensearch-production]
          - get: opensearch-release
            passed: [plan-opensearch-production]
          - get: opensearch-stemcell-jammy
            passed: [plan-opensearch-production]
          - get: terraform-yaml
            resource: terraform-yaml-production
          - get: general-task
      - task: prepare-deployment
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_production_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_production_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: prepare_deploy
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
      - task: opensearch-manifest
        image: general-task
        config:
          <<: *build-prod-manifest-config
      - task: terraform-secrets
        image: general-task
        file: deploy-logs-opensearch-config/ci/terraform-secrets.yml
      - put: opensearch-production-deployment
        params:
          <<: *prod-deploy-params
          dry_run: false
      - task: finish-deployment
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_production_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_production_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: finish_deploy
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: FAILED to deploy logs-OpenSearch in production
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: smoke-tests-production
    serial_groups: [bosh-production]
    plan:
      - in_parallel:
          - get: tests-timer
            trigger: true
          - get: pipeline-tasks
          - get: opensearch-release
            trigger: true
            passed: [deploy-opensearch-production]
          - get: opensearch-stemcell-jammy
            trigger: true
            passed: [deploy-opensearch-production]
          - get: deploy-logs-opensearch-config
            passed: [deploy-opensearch-production]
            trigger: true
          - get: opensearch-production-deployment
            trigger: true
            passed: [deploy-opensearch-production]
      - task: smoke-tests
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_production_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_production_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: smoke_tests
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: Smoke tests for OpenSearch in production FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: e2e-tests-production
    serial_groups: [bosh-production]
    plan:
      - in_parallel:
          - get: pipeline-tasks
          - get: opensearch-release
            trigger: true
            passed: [deploy-opensearch-production]
          - get: opensearch-stemcell-jammy
            trigger: true
            passed: [deploy-opensearch-production]
          - get: deploy-logs-opensearch-config
            passed: [deploy-opensearch-production]
            trigger: true
          - get: opensearch-production-deployment
            trigger: true
            passed: [deploy-opensearch-production]
          - get: tests-timer
            trigger: true
          - get: playwright-python
          - get: general-task
      - task: provision-test-user-cf-access
        image: general-task
        config:
          platform: linux
          inputs:
            - name: deploy-logs-opensearch-config
          run:
            path: deploy-logs-opensearch-config/ci/provision-test-user-cf-access.sh
        params:
          CF_API_URL: ((prod-cf-api-url))
          CF_USERNAME: ((production-cf-username))
          CF_PASSWORD: ((production-cf-password))
          TEST_USER_1_USERNAME: ((production-test-user-1-username))
          TEST_USER_2_USERNAME: ((production-test-user-2-username))
          TEST_USER_3_USERNAME: ((production-test-user-3-username))
          TEST_USER_4_USERNAME: ((production-test-user-4-username))
          CF_ORG_1_NAME: ((test-org-1))
          CF_ORG_2_NAME: ((test-org-2))
          CF_ORG_3_NAME: ((test-org-3))
      - task: e2e-tests
        image: playwright-python
        file: deploy-logs-opensearch-config/ci/e2e-tests.yml
        params:
          CF_SYSTEM_DOMAIN: ((cf-system-domain-production))

          CF_ORG_1_NAME: ((test-org-1))
          CF_ORG_2_NAME: ((test-org-2))
          CF_ORG_3_NAME: ((test-org-3))

          TEST_USER_1_USERNAME: ((production-test-user-1-username))
          TEST_USER_1_PASSWORD: ((production-test-user-1-password))
          TEST_USER_1_TOTP_SEED: ((production-test-user-1-totp-seed))

          TEST_USER_2_USERNAME: ((production-test-user-2-username))
          TEST_USER_2_PASSWORD: ((production-test-user-2-password))
          TEST_USER_2_TOTP_SEED: ((production-test-user-2-totp-seed))

          TEST_USER_3_USERNAME: ((production-test-user-3-username))
          TEST_USER_3_PASSWORD: ((production-test-user-3-password))
          TEST_USER_3_TOTP_SEED: ((production-test-user-3-totp-seed))

          TEST_USER_4_USERNAME: ((production-test-user-4-username))
          TEST_USER_4_PASSWORD: ((production-test-user-4-password))
          TEST_USER_4_TOTP_SEED: ((production-test-user-4-totp-seed))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: E2E tests for OpenSearch in production FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: tenant-production
    serial_groups: [bosh-production]
    plan:
      - in_parallel:
          - get: general-task
          - get: pipeline-tasks
          - get: deploy-logs-opensearch-config
            passed: [deploy-opensearch-production]
            trigger: true
          - get: opensearch-production-deployment
            trigger: true
            passed: [deploy-opensearch-production]
      - task: create-tenants
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_production_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_production_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: upload_tenant
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))
    on_failure:
      put: slack
      params:
        <<: *slack-failure-params
        text: |
          :x: Create tenants for OpenSearch in production FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

  - name: upload-dashboards-objects-production
    serial_groups: [bosh-production]
    plan:
      - in_parallel:
          - get: pipeline-tasks
          - get: opensearch-release
          - get: opensearch-stemcell-jammy
          - get: deploy-logs-opensearch-config
            passed: [tenant-production]
            trigger: true
          - get: opensearch-production-deployment
            passed: [tenant-production]
            trigger: true
      - task: upload-dashboards-objects
        file: pipeline-tasks/bosh-logs-errand.yml
        params:
          BOSH_ENVIRONMENT: ((bosh_production_environment))
          BOSH_CLIENT: ((bosh_client))
          BOSH_CLIENT_SECRET: ((bosh_production_client_secret))
          BOSH_DEPLOYMENT: logs-opensearch
          BOSH_ERRAND: upload-dashboards-objects
          BOSH_FLAGS: "--keep-alive"
          BOSH_CA_CERT: ((bosh_ca_cert_store.certificate))

resources:
  - name: opensearch-release-git-repo
    type: git
    source:
      commit_verification_keys: ((cloud-gov-pgp-keys))
      uri: https://github.com/cloud-gov/opensearch-boshrelease
      branch: main

  - name: opensearch-final-builds-dir-tarball
    type: s3-iam
    source: &bosh-releases-bucket-info
      bucket: ((s3-bosh-releases-bucket))
      region_name: ((aws-region))
      server_side_encryption: AES256
      versioned_file: final-builds-dir-opensearch.tgz

  - name: opensearch-releases-dir-tarball
    type: s3-iam
    source:
      <<: *bosh-releases-bucket-info
      versioned_file: releases-dir-opensearch.tgz

  - name: opensearch-release
    type: s3-iam
    source:
      bucket: ((s3-bosh-releases-bucket))
      region_name: ((aws-region))
      regexp: opensearch-([\d\.]*).tgz
      server_side_encryption: AES256

  - name: terraform-yaml-development
    type: s3-iam
    source:
      bucket: ((tf-state-bucket-development))
      versioned_file: ((tf-state-file-development))
      region_name: ((aws-region))

  - name: terraform-yaml-staging
    type: s3-iam
    source:
      bucket: ((tf-state-bucket-staging))
      versioned_file: ((tf-state-file-staging))
      region_name: ((aws-region))

  - name: terraform-yaml-production
    type: s3-iam
    source:
      bucket: ((tf-state-bucket-production))
      versioned_file: ((tf-state-file-production))
      region_name: ((aws-region))

  - name: deploy-logs-opensearch-config
    type: git
    source:
      commit_verification_keys: ((cloud-gov-pgp-keys))
      uri: https://github.com/cloud-gov/deploy-logs-opensearch.git
      branch: main


  - name: opensearch-stemcell-jammy
    source:
      name: bosh-aws-xen-hvm-ubuntu-jammy-go_agent
    type: bosh-io-stemcell

  - name: pipeline-tasks
    type: git
    source:
      commit_verification_keys: ((cloud-gov-pgp-keys))
      uri: https://github.com/cloud-gov/cg-pipeline-tasks.git
      branch: main

  - name: tests-timer
    type: time
    source:
      interval: 30m

  - name: fifteen-minute-timer
    type: time
    source:
      interval: 15m

  - name: slack
    type: slack-notification
    source:
      url: ((slack-webhook-url))

  - name: opensearch-development-deployment
    type: bosh-deployment
    source: &bosh-params-development
      target: ((bosh-director-info.development.environment))
      client: ((bosh-director-info.development.client))
      client_secret: ((bosh-director-info.development.client_secret))
      ca_cert: ((bosh-director-info.development.ca_cert))
      deployment: logs-opensearch

  - name: opensearch-staging-deployment
    type: bosh-deployment
    source: &bosh-params-staging
      target: ((bosh-director-info.staging.environment))
      client: ((bosh-director-info.staging.client))
      client_secret: ((bosh-director-info.staging.client_secret))
      ca_cert: ((bosh-director-info.staging.ca_cert))
      deployment: logs-opensearch

  - name: opensearch-production-deployment
    type: bosh-deployment
    source: &bosh-params-production
      target: ((bosh-director-info.production.environment))
      client: ((bosh-director-info.production.client))
      client_secret: ((bosh-director-info.production.client-secret))
      ca_cert: ((bosh-director-info.production.ca_cert))
      deployment: logs-opensearch

  - name: general-task
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: general-task
      aws_region: us-gov-west-1
      tag: latest

  - name: playwright-python
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: playwright-python
      aws_region: us-gov-west-1
      tag: latest

  - name: weekly
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York
      days: [Thursday]
      initial_version: true

resource_types:
  - name: registry-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: registry-image-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: slack-notification
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: slack-notification-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: bosh-deployment
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: bosh-deployment-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: s3-iam
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: s3-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: time
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: time-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: git
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: git-resource
      aws_region: us-gov-west-1
      tag: latest
